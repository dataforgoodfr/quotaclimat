version: '3.8'
services:
  test:
    container_name: test
    build:
      context: ./
      dockerfile: Dockerfile
    entrypoint: ["poetry", "run", "pytest", "-v", "--cov", "test", "test/"]
    environment:
      ENV: docker
      PYTHONPATH: /app
      POSTGRES_USER: user
      POSTGRES_DB: barometre
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
    volumes:
      - ./quotaclimat/:/app/quotaclimat/
      - ./postgres/:/app/postgres/
      - ./test/:/app/test/
      - ./app.py:/app/app.py
    depends_on:
      nginxtest:
        condition: service_healthy
      postgres_db:
        condition: service_healthy

  nginxtest: # to test locally webpages
    container_name: nginxtest
    image: nginx:latest
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 8000:80
    volumes:
      - './mockwebsite:/usr/share/nginx/html'

  ingest_to_db:
    container_name: ingest_to_db
    ports:
      - 5000:5000
    build:
      context: ./
      dockerfile: Dockerfile
    #entrypoint: ["sleep", "1200"] # use to debug the container if needed
    entrypoint: ["python", "quotaclimat/data_ingestion/ingest_db/ingest_sitemap_in_db.py"]
    environment:
      ENV: docker
      PYTHONPATH: /app
      POSTGRES_USER: user
      POSTGRES_DB: barometre
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      HEALTHCHECK_PORT: 5000
      HEALTHCHECK_SERVER: "0.0.0.0"
    volumes:
      - ./quotaclimat/:/app/quotaclimat/
      - ./postgres/:/app/postgres/
      - ./app.py:/app/app.py
    depends_on:
      nginxtest:
        condition: service_healthy
      postgres_db:
        condition: service_healthy

  streamlit:
    container_name: streamlit
    ports: 
    - 8501:8501
    build:
      context: ./
      dockerfile: Dockerfile
    #entrypoint: ["sleep", "1200"] # use to debug the container if needed
    entrypoint: ["poetry", "run", "python", "-m", "streamlit", "run", "app.py"]
    environment:
      ENV: dev
      POSTGRES_USER: user
      POSTGRES_DB: barometre
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
    volumes:
      - ./quotaclimat/:/app/quotaclimat/
      - ./postgres/:/app/postgres/
      - ./app.py:/app/app.py
      - ./pages/:/app/pages/
      - ./.streamlit/:/app/.streamlit/
    depends_on:
      postgres_db:
        condition: service_healthy

  postgres_db:
    image: postgres:15
    ports:
      - 5432:5432
    volumes:
      - './pgdata:/var/lib/postgresql/data' # persist data https://stackoverflow.com/a/41650891/3535853
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: barometre
      POSTGRES_PASSWORD: password
    logging: # no logs for postgres container
            driver: none

  metabase:
      container_name: metabase_barometre
      image: metabase/metabase:latest
      volumes:
        - './mb-data:/metabase-data'  # Volumes where Metabase data will be persisted
      ports:
        - 3000:3000
      environment:
        MB_DB_TYPE: postgres
        MB_DB_DBNAME: barometre
        MB_DB_PORT: 5432
        MB_DB_USER: user
        MB_DB_PASS: password
        MB_DB_HOST: postgres_db
        MB_DB_FILE: "/metabase-data/metabase.db" # https://www.metabase.com/docs/latest/operations-guide/running-metabase-on-docker.html#mounting-a-mapped-file-storage-volume
        JAVA_TIMEZONE: Europe/Paris
      depends_on:
        postgres_db:
          condition: service_healthy