
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_dbt_project'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'my_dbt_project'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  my_dbt_project:
    # Config indicated by + and applies to all files under models/example/
    homepage:
      +materialized: view

# delete tables when seed are executed to have a clean start
seeds:
  my_dbt_project:
    keywords:
      table: keywords
      enabled: "{{ target.name != 'prod' }}" # safe guard
      pre-hook:
        - >
          {% if target.name != 'prod' %}
          DO $$
          BEGIN
            IF EXISTS (
              SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'keywords'
            ) THEN
              EXECUTE 'DELETE FROM public.keywords';
            END IF;
          END
          $$;
          {% else %}
          -- safeguard: skip DELETE in prod
          {% endif %}
      post-hook:
       - "ALTER TABLE keywords ADD PRIMARY KEY (id,start)"
       - "ALTER TABLE keywords ALTER COLUMN program_metadata_id TYPE text"

    program_metadata:
        table: program_metadata
        enabled: "{{ target.name != 'prod' }}" # safe guard
        pre-hook:
          - >
            {% if target.name != 'prod' %}
            DO $$
            BEGIN
              IF EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'program_metadata'
              ) THEN
                EXECUTE 'DELETE FROM public.program_metadata';
              END IF;
            END
            $$;
            {% else %}
            -- safeguard: skip DELETE in prod
            {% endif %}

    dictionary:
        table: dictionary
        enabled: "{{ target.name != 'prod' }}" # safe guard
        pre-hook:
          - >
            {% if target.name != 'prod' %}
            DO $$
            BEGIN
              IF EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'dictionary'
              ) THEN
                EXECUTE 'DELETE FROM public.dictionary';
              END IF;
            END
            $$;
            {% else %}
            -- safeguard: skip DELETE in prod
            {% endif %}
        post-hook:
          - "ALTER TABLE dictionary ALTER COLUMN categories TYPE TEXT[] USING string_to_array(trim(both '{}' from categories), ',')"
          - "ALTER TABLE dictionary ALTER COLUMN themes TYPE TEXT[] USING string_to_array(trim(both '{}' from themes), ',')"

    time_monitored:
        table: time_monitored
        enabled: "{{ target.name != 'prod' }}" # safe guard
        pre-hook:
          - >
            {% if target.name != 'prod' %}
            DO $$
            BEGIN
              IF EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'time_monitored'
              ) THEN
                EXECUTE 'DELETE FROM public.time_monitored';
              END IF;
            END
            $$;
            {% else %}
            -- safeguard: skip DELETE in prod
            {% endif %}